package perpustakaan.smk.pgri.pkg1.jakarta;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import com.opencsv.CSVParser;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVRecord;

/**
 *
 * @author AMIRULLAH
 */
public class Petugas_ImportEksemplar extends javax.swing.JFrame {

    /**
     * Creates new form Petugas_ImportEksemplar
     */
    ResultSet rs = null;
    Connection CC = null;
    PreparedStatement pst = null;
    public Statement stt;
    public Statement stt1;
    public String sql;
    public Petugas_ImportEksemplar() {
        initComponents();
        CC = new koneksi().connect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public File excelFile;
    public void readCSV(){
               String name;
        JFileChooser excelFileChooser = new JFileChooser();
        excelFileChooser.setDialogTitle("Select Excel File");
         FileNameExtensionFilter fnef = new FileNameExtensionFilter("CSV (Comma delimited)(*.csv)","csv");
         excelFileChooser.setFileFilter(fnef);
         excelFileChooser.setAcceptAllFileFilterUsed(false);
        int excelChooser = excelFileChooser.showOpenDialog(null);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {
            
            excelFile = excelFileChooser.getSelectedFile();
            name = excelFileChooser.getSelectedFile().getName();
            filename.setText(name);
            //JOptionPane.showMessageDialog(null, "Import Data Berhasil Ditambahkan, Silahkan Tekan Submit Untuk Menyimpan !!");
           
        }
    }
public String barcode,cn,TK,Inven,tgltrima,lok,tgl_psn,hdh,price,tglfktur,jdl;
public int rsColl,rsLok,rsSor,harga,rsBliId;
     public void insertCSV() throws FileNotFoundException, IOException{
         Reader in = new FileReader(excelFile);
        Iterable<CSVRecord> records = CSVFormat.DEFAULT.withFirstRecordAsHeader().parse(in);
        for (CSVRecord record : records) {
             barcode = record.get(0).replaceAll("[<>]", "");
             cn = record.get("No. Panggil");
             TK = record.get("Tipe Koleksi");
             Inven = record.get("No. Inventaris");
             tgltrima = record.get("Tanggal Penerima (Bulan/Tanggal/Tahun)");
             lok = record.get("Lokasi");
             tgl_psn = record.get("Tanggal Pemesanan (Bulan/Tanggal/Tahun)");
             hdh = record.get("Hadiah");
             price = record.get("Harga");
             tglfktur = record.get("Tanggal Faktur (Bulan/Tanggal/Tahun)");
             jdl = record.get("Judul");
             try{
                getBliblioId();
                getCollTypeId();
                getLokId();
                getSorId();
                checkData();
                System.out.println(rsLok);
             }catch(Exception e){
               e.printStackTrace(); 
             }
        }
         JOptionPane.showMessageDialog(null, "Data Berhasil di Simpan!!");
       
    }
    private void checkData(){
        try {
            Statement stat = CC.createStatement();
            sql="SELECT * FROM Item WHERE item_code='"+barcode.replaceAll("[<>]", "")+"'";
            System.out.println(cn);
            ResultSet rs = stat.executeQuery(sql);
            if(rs.next()){
                getLokId();
                stt = CC.createStatement();
                String Date;
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
                LocalDateTime now = LocalDateTime.now();  
                Date = dtf.format(now);  
                String update="UPDATE Item SET call_number = '"+cn+"',coll_type_id="+rsColl+","
                        + "inventory_code='"+Inven+"',received_date='"+tgltrima+"',"
                        + "location_id="+rsLok+",order_date='"+tgl_psn+"',"
                        + "source="+rsSor+",price="+harga+",invoice_date='"+tglfktur+"',input_date='"+Date+"',last_update='"+Date+"'WHERE item_code='"+barcode.replaceAll("[<>]", "")+"'";
                stt.executeUpdate(update);
            }else{
                getLokId();
                String Date;
                DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
                LocalDateTime now = LocalDateTime.now();  
                Date = dtf.format(now);  
                stt = CC.createStatement();
                String Insert="INSERT INTO Item(biblio_id,call_number,coll_type_id,item_code,inventory_code,received_date,location_id,order_date,source,price,invoice_date,input_date,last_update)"
                        + "VALUES("+rsBliId+",'"+cn+"',"+rsColl+",'"+barcode.replaceAll("[<>]", "")+"','"+Inven+"','"+tgltrima+"',"+rsLok+",'"+tgl_psn+"',"+rsSor+","+harga+",'"+tglfktur+"','"+Date+"','"+Date+"')";
                stt.executeUpdate(Insert);
             
            }
           
        } catch (Exception e) {
         e.printStackTrace();
        }
    }
    public void getBliblioId(){
        try{
            Statement stat = CC.createStatement();
            sql="SELECT * FROM new_bliblio WHERE call_number='"+cn+"'";
            ResultSet rs = stat.executeQuery(sql);
            if(rs.next()){
                int a = rs.getInt("IdBliblio");
                rsBliId=a;
            }else{
                
            }
            rs.close();
        }catch(Exception e){
        e.printStackTrace();
        }
    }
    private void getCollTypeId(){
        try{
            Statement stat = CC.createStatement();
            sql="SELECT * FROM mst_coll_type WHERE coll_type_name='"+TK+"'";
            ResultSet rs = stat.executeQuery(sql);
            if(rs.next()){
                int a = rs.getInt("coll_type_id");
                rsColl=a;
            }else{
             String Date;
             DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
             LocalDateTime now = LocalDateTime.now();  
             Date = dtf.format(now);
             stt = CC.createStatement();
             String SQL = "INSERT INTO mst_coll_type (location_name,input_date,last_update) VALUES"
                     + "('"+TK+"','"+Date+"','"+Date+"')";
             stt.executeUpdate(SQL);
            String Check = "SELECT mst_coll_type.coll_type_id, mst_coll_type.coll_type_name FROM mst_coll_type WHERE coll_type_name = '"+TK+"'";
            ResultSet rsa = stat.executeQuery(Check);
            if(rsa.next()){
                rsColl= rsa.getInt("mst_location.location_id");
            }
             stt.close();
            }
            rs.close();
        }catch(Exception e){
        e.printStackTrace();
        }
    }
    public void getLokId(){
        try{
            Statement stat = CC.createStatement();
            sql="SELECT * FROM mst_location WHERE location_name='"+lok+"'";
            ResultSet rs = stat.executeQuery(sql);
            if(rs.next()){
                int a = rs.getInt("location_id");
                rsLok=a;
            }else{
                 String Date;
             DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
             LocalDateTime now = LocalDateTime.now();  
             Date = dtf.format(now);
             stt = CC.createStatement();
             String SQL = "INSERT INTO mst_location (location_name,input_date,last_update) VALUES"
                     + "('"+lok+"','"+Date+"','"+Date+"')";
             stt.executeUpdate(SQL);          
            String Check = "SELECT mst_location.location_id, mst_location.location_name FROM mst_location WHERE location_name = '"+lok+"'";
            ResultSet rsa = stat.executeQuery(Check);
            if(rsa.next()){
                rsLok= rsa.getInt("mst_location.location_id");
            }
             stt.close();
        
            }
            rs.close();
        }catch(Exception e){
        e.printStackTrace();
        }
    }
    private void getSorId(){
        try{
            if(hdh.equals("Beli")||hdh.equals("beli")){
                rsSor=1;
                 String a = price;
                 harga = Integer.parseInt(a);
            }else{
                rsSor=2;
                harga=0;
                
            }
        }catch(Exception e){
        e.printStackTrace();
        }
    }
    private void clearCSV(){
        excelFile = null;
        filename.setText("");
    }
   
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        submit = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        browse = new javax.swing.JButton();
        filename = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Import Eksemplar");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(100, 10, 220, 30);

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });
        jPanel1.add(submit);
        submit.setBounds(240, 180, 90, 22);

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        jPanel1.add(clear);
        clear.setBounds(70, 180, 80, 22);

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });
        jPanel1.add(browse);
        browse.setBounds(10, 80, 72, 22);
        jPanel1.add(filename);
        filename.setBounds(100, 80, 230, 20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed

        try {
            
            insertCSV();
            
        } catch (IOException ex) {
            Logger.getLogger(Petugas_ImportEksemplar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_submitActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
      clearCSV();
    }//GEN-LAST:event_clearActionPerformed

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        // TODO add your handling code here:
        readCSV();
    }//GEN-LAST:event_browseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Petugas_ImportEksemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Petugas_ImportEksemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Petugas_ImportEksemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Petugas_ImportEksemplar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Petugas_ImportEksemplar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JButton clear;
    private javax.swing.JLabel filename;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
